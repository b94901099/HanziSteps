//
//  StoryReaderView.swift
//  HanziSteps
//
//  Created by Sheng-Lun Chen on 7/31/25.
//

import SwiftUI
import SwiftData
import AVFoundation

struct StoryReaderView: View {
    let storyId: String
    @Environment(\.modelContext) private var modelContext
    @Query private var stories: [Story]
    @State private var currentPageIndex = 0
    @State private var isSpeaking = false
    @State private var speechMessage = ""
    @State private var synthesizer = AVSpeechSynthesizer()
    @State private var speechDelegate = SpeechDelegate()
    
    private var currentStory: Story? {
        stories.first { $0.id == storyId }
    }
    
    private var sortedSentences: [Sentence] {
        currentStory?.sentences.sorted { $0.order < $1.order } ?? []
    }
    
    private var currentSentence: Sentence? {
        guard currentPageIndex < sortedSentences.count else { return nil }
        return sortedSentences[currentPageIndex]
    }
    
    var body: some View {
        GeometryReader { geometry in
            VStack(spacing: 0) {
                // È†ÇÈÉ®Â∞éËà™Ê¨Ñ
                HStack(spacing: 12) {
                    Button(action: goBack) {
                        Image(systemName: "chevron.left")
                            .font(.title2)
                            .foregroundColor(.blue)
                    }
                    .frame(width: 44, height: 44)
                    
                    Spacer()
                    
                    Text(currentStory?.title ?? "ÊïÖ‰∫ã")
                        .font(.headline)
                        .fontWeight(.semibold)
                        .lineLimit(1)
                        .minimumScaleFactor(0.8)
                        .frame(maxWidth: geometry.size.width * 0.4)
                    
                    Spacer()
                    
                    Button(action: speakCurrentSentence) {
                        HStack(spacing: 6) {
                            Image(systemName: isSpeaking ? "speaker.wave.2.fill" : "speaker.wave.2")
                                .font(.title3)
                            Text(isSpeaking ? "ÊúóËÆÄ‰∏≠" : "ÊúóËÆÄ")
                                .font(.subheadline)
                                .fontWeight(.semibold)
                        }
                        .foregroundColor(.white)
                        .padding(.horizontal, 12)
                        .padding(.vertical, 8)
                        .background(
                            RoundedRectangle(cornerRadius: 20)
                                .fill(isSpeaking ? Color.orange : Color.blue)
                                .shadow(color: .black.opacity(0.2), radius: 4, y: 2)
                        )
                    }
                    .disabled(isSpeaking)
                    .scaleEffect(isSpeaking ? 1.05 : 1.0)
                    .animation(.easeInOut(duration: 0.2), value: isSpeaking)
                    .frame(maxWidth: geometry.size.width * 0.3)
                }
                .padding(.horizontal, 16)
                .padding(.vertical, 8)
                .background(Color(.systemBackground))
                .shadow(color: .black.opacity(0.1), radius: 2, y: 1)
                
                // ‰∏ªË¶ÅÂÖßÂÆπÂçÄÂüü
                ZStack {
                    // ËÉåÊôØÂúñÁâá
                    if let imageUrl = currentSentence?.imageUrl,
                       let url = URL(string: imageUrl) {
                        AsyncImage(url: url) { phase in
                            switch phase {
                            case .empty:
                                Rectangle()
                                    .fill(Color.gray.opacity(0.3))
                                    .overlay(
                                        VStack {
                                            ProgressView()
                                                .scaleEffect(1.5)
                                            Text("ËºâÂÖ•ÂúñÁâá‰∏≠...")
                                                .font(.caption)
                                                .foregroundColor(.gray)
                                        }
                                    )
                            case .success(let image):
                                image
                                    .resizable()
                                    .aspectRatio(contentMode: .fit)
                                    .frame(maxWidth: geometry.size.width, maxHeight: geometry.size.height * 0.55)
                            case .failure(let error):
                                Rectangle()
                                    .fill(Color.gray.opacity(0.3))
                                    .overlay(
                                        VStack {
                                            Image(systemName: "photo")
                                                .font(.largeTitle)
                                                .foregroundColor(.gray)
                                            Text("ÂúñÁâáËºâÂÖ•Â§±Êïó")
                                                .font(.caption)
                                                .foregroundColor(.red)
                                            Text(error.localizedDescription)
                                                .font(.caption2)
                                                .foregroundColor(.gray)
                                                .multilineTextAlignment(.center)
                                                .padding(.horizontal)
                                        }
                                    )
                                    .onAppear {
                                        print("‚ùå ÂúñÁâáËºâÂÖ•Â§±Êïó: \(error.localizedDescription)")
                                        print("üîó ÂúñÁâáURL: \(imageUrl)")
                                    }
                            @unknown default:
                                Rectangle()
                                    .fill(Color.gray.opacity(0.3))
                                    .overlay(
                                        Image(systemName: "photo")
                                            .font(.largeTitle)
                                            .foregroundColor(.gray)
                                    )
                            }
                        }
                        .frame(width: geometry.size.width, height: geometry.size.height * 0.55)
                        .onAppear {
                            print("üñºÔ∏è ÂòóË©¶ËºâÂÖ•ÂúñÁâá: \(imageUrl)")
                        }
                    } else {
                        Rectangle()
                            .fill(Color.gray.opacity(0.3))
                            .frame(width: geometry.size.width, height: geometry.size.height * 0.55)
                            .overlay(
                                VStack {
                                    Image(systemName: "photo")
                                        .font(.largeTitle)
                                        .foregroundColor(.gray)
                                    Text("ÁÑ°ÂúñÁâá")
                                        .font(.caption)
                                        .foregroundColor(.gray)
                                }
                            )
                            .onAppear {
                                print("‚ö†Ô∏è Ê≤íÊúâÂúñÁâáURLÊàñURLÊ†ºÂºèÈåØË™§")
                                if let imageUrl = currentSentence?.imageUrl {
                                    print("üîó ÂúñÁâáURL: \(imageUrl)")
                                }
                            }
                    }
                    
                    // ÁøªÈ†ÅÊåâÈàï
                    HStack {
                        // ‰∏ä‰∏ÄÈ†ÅÊåâÈàï
                        Button(action: previousPage) {
                            Image(systemName: "chevron.left")
                                .font(.title2)
                                .foregroundColor(.white)
                                .frame(width: 44, height: 44)
                                .background(Color.black.opacity(0.5))
                                .clipShape(Circle())
                        }
                        .disabled(currentPageIndex == 0)
                        .opacity(currentPageIndex == 0 ? 0.3 : 1.0)
                        
                        Spacer()
                        
                        // ‰∏ã‰∏ÄÈ†ÅÊåâÈàï
                        Button(action: nextPage) {
                            Image(systemName: "chevron.right")
                                .font(.title2)
                                .foregroundColor(.white)
                                .frame(width: 44, height: 44)
                                .background(Color.black.opacity(0.5))
                                .clipShape(Circle())
                        }
                        .disabled(currentPageIndex >= sortedSentences.count - 1)
                        .opacity(currentPageIndex >= sortedSentences.count - 1 ? 0.3 : 1.0)
                    }
                    .padding(.horizontal, 16)
                }
                .frame(width: geometry.size.width)
                
                // ÊñáÂ≠óÂçÄÂüü
                VStack(spacing: 12) {
                    Text(currentSentence?.text ?? "")
                        .font(.system(size: calculateFontSize(for: geometry), weight: .bold, design: .default))
                        .fontWeight(.bold)
                        .multilineTextAlignment(.center)
                        .padding(.horizontal, 20)
                        .padding(.vertical, 16)
                        .frame(maxWidth: geometry.size.width)
                        .lineLimit(nil)
                        .fixedSize(horizontal: false, vertical: true)
                        .foregroundColor(.primary)
                        .background(
                            RoundedRectangle(cornerRadius: 12)
                                .fill(Color(.systemBackground))
                                .shadow(color: .black.opacity(0.1), radius: 4, x: 0, y: 2)
                        )
                        .shadow(color: .black.opacity(0.15), radius: 3, x: 0, y: 1)
                    
                    // È†ÅÁ¢ºÊåáÁ§∫Âô®
                    ScrollView(.horizontal, showsIndicators: false) {
                        HStack(spacing: 6) {
                            ForEach(0..<sortedSentences.count, id: \.self) { index in
                                Circle()
                                    .fill(index == currentPageIndex ? Color.blue : Color.gray.opacity(0.3))
                                    .frame(width: 6, height: 6)
                            }
                        }
                        .padding(.horizontal, 16)
                    }
                    .padding(.bottom, 16)
                }
                .background(Color(.systemBackground))
                .frame(width: geometry.size.width)
            }
            .frame(width: geometry.size.width, height: geometry.size.height)
        }
        .navigationBarHidden(true)
        .onAppear {
            print("üìñ ÈñãÂßãÈñ±ËÆÄÊïÖ‰∫ã: \(storyId)")
            // Ê™¢Ê∏¨ÂèØÁî®ÁöÑË™ûÈü≥ÈÅ∏È†Ö
            logAvailableVoices()
        }
    }
    
    // MARK: - Â∞éËà™ÂäüËÉΩ
    @Environment(\.dismiss) private var dismiss
    
    private func goBack() {
        dismiss()
    }
    
    private func previousPage() {
        // ÂÅúÊ≠¢Áï∂ÂâçÊúóËÆÄ
        if synthesizer.isSpeaking {
            synthesizer.stopSpeaking(at: .immediate)
            isSpeaking = false
            speechMessage = ""
        }
        
        withAnimation(.easeInOut(duration: 0.3)) {
            currentPageIndex = max(0, currentPageIndex - 1)
        }
    }
    
    private func nextPage() {
        // ÂÅúÊ≠¢Áï∂ÂâçÊúóËÆÄ
        if synthesizer.isSpeaking {
            synthesizer.stopSpeaking(at: .immediate)
            isSpeaking = false
            speechMessage = ""
        }
        
        withAnimation(.easeInOut(duration: 0.3)) {
            currentPageIndex = min(sortedSentences.count - 1, currentPageIndex + 1)
        }
    }
    
    // MARK: - Â≠óÈ´îÂ§ßÂ∞èË®àÁÆó
    private func calculateFontSize(for geometry: GeometryProxy) -> CGFloat {
        let isIPad = UIDevice.current.userInterfaceIdiom == .pad
        let screenWidth = geometry.size.width
        let screenHeight = geometry.size.height
        let textLength = currentSentence?.text.count ?? 0
        
        // Âü∫Á§éÂ≠óÈ´îÂ§ßÂ∞è
        var baseFontSize: CGFloat = 40
        
        if isIPad {
            // iPad Â≠óÈ´îÂ§ßÂ∞èË®àÁÆó
            if screenWidth > screenHeight {
                // Ê©´ÂêëÊ®°Âºè - ÊúâÊõ¥Â§öÊ∞¥Âπ≥Á©∫Èñì
                baseFontSize = min(screenWidth * 0.045, 68)
            } else {
                // Á∏±ÂêëÊ®°Âºè - ÊúâÊõ¥Â§öÂûÇÁõ¥Á©∫Èñì
                baseFontSize = min(screenWidth * 0.055, 76)
            }
        } else {
            // iPhone Â≠óÈ´îÂ§ßÂ∞èË®àÁÆó
            if screenWidth > screenHeight {
                // Ê©´ÂêëÊ®°Âºè
                baseFontSize = min(screenWidth * 0.075, 52)
            } else {
                // Á∏±ÂêëÊ®°Âºè
                baseFontSize = min(screenWidth * 0.095, 56)
            }
        }
        
        // Ê†πÊìöÊñáÂ≠óÈï∑Â∫¶Ë™øÊï¥Â≠óÈ´îÂ§ßÂ∞è
        if textLength > 20 {
            baseFontSize *= 0.9
        } else if textLength > 15 {
            baseFontSize *= 0.95
        }
        
        // Á¢∫‰øùÊúÄÂ∞èÂ≠óÈ´îÂ§ßÂ∞è
        return max(baseFontSize, 36)
    }
    
    // MARK: - ÊúóËÆÄÂäüËÉΩ
    private func speakCurrentSentence() {
        guard let sentence = currentSentence?.text else { return }
        
        // Â¶ÇÊûúÊ≠£Âú®ÊúóËÆÄÔºåÂÖàÂÅúÊ≠¢
        if synthesizer.isSpeaking {
            synthesizer.stopSpeaking(at: .immediate)
            isSpeaking = false
            speechMessage = ""
            return
        }
        
        isSpeaking = true
        speechMessage = "Ê≠£Âú®Ê∫ñÂÇôÊúóËÆÄ..."
        
        let utterance = AVSpeechUtterance(string: sentence)
        
        // ÂòóË©¶‰ΩøÁî®È´òÂìÅË≥™Ë™ûÈü≥ÈÅ∏È†Ö
        if let enhancedVoice = getEnhancedVoice() {
            utterance.voice = enhancedVoice
        } else {
            // ÂÇôÁî®Ë™ûÈü≥ÈÅ∏È†Ö
            if let voice = AVSpeechSynthesisVoice(language: "zh-TW") {
                utterance.voice = voice
            } else if let voice = AVSpeechSynthesisVoice(language: "zh-CN") {
                utterance.voice = voice
            } else if let voice = AVSpeechSynthesisVoice(language: "zh") {
                utterance.voice = voice
            } else {
                utterance.voice = AVSpeechSynthesisVoice()
            }
        }
        
        // ÂÑ™ÂåñË™ûÈü≥ÂèÉÊï∏ÔºåËÆìËÅ≤Èü≥Êõ¥Ëá™ÁÑ∂
        utterance.rate = 0.42  // Á®çÂæÆÊÖ¢‰∏ÄÈªûÔºåÊõ¥Ëá™ÁÑ∂
        utterance.volume = 1.0
        utterance.pitchMultiplier = 1.05  // Á®çÂæÆÊèêÈ´òÈü≥Ë™øÔºåÊõ¥ÁîüÂãï
        utterance.preUtteranceDelay = 0.15  // ÈñãÂßãÂâçÁ®çÂæÆÂª∂ÈÅ≤
        utterance.postUtteranceDelay = 0.25  // ÁµêÊùüÂæåÁ®çÂæÆÂª∂ÈÅ≤
        
        // Ë®≠ÁΩÆ‰ª£ÁêÜÂõûË™ø
        speechDelegate.onStart = {
            DispatchQueue.main.async {
                self.speechMessage = "Ê≠£Âú®ÊúóËÆÄ..."
            }
        }
        
        speechDelegate.onFinish = {
            DispatchQueue.main.async {
                self.isSpeaking = false
                self.speechMessage = "ÊúóËÆÄÂÆåÊàê"
                
                DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
                    self.speechMessage = ""
                }
            }
        }
        
        speechDelegate.onCancel = {
            DispatchQueue.main.async {
                self.isSpeaking = false
                self.speechMessage = "ÊúóËÆÄË¢´ÂèñÊ∂à"
                
                DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
                    self.speechMessage = ""
                }
            }
        }
        
        synthesizer.delegate = speechDelegate
        synthesizer.speak(utterance)
    }
    
    // MARK: - Áç≤ÂèñÈ´òÂìÅË≥™Ë™ûÈü≥
    private func getEnhancedVoice() -> AVSpeechSynthesisVoice? {
        // ÂòóË©¶Áç≤ÂèñÈ´òÂìÅË≥™ÁöÑ‰∏≠ÊñáË™ûÈü≥
        let preferredVoices = [
            "zh-TW",      // ÁπÅÈ´î‰∏≠ÊñáÔºàÂè∞ÁÅ£Ôºâ
            "zh-CN",      // Á∞°È´î‰∏≠ÊñáÔºà‰∏≠ÂúãÔºâ
            "zh-HK",      // ÁπÅÈ´î‰∏≠ÊñáÔºàÈ¶ôÊ∏ØÔºâ
            "zh"          // ÈÄöÁî®‰∏≠Êñá
        ]
        
        for language in preferredVoices {
            // Áç≤ÂèñË©≤Ë™ûË®ÄÁöÑÊâÄÊúâÂèØÁî®Ë™ûÈü≥
            let voices = AVSpeechSynthesisVoice.speechVoices()
            let languageVoices = voices.filter { $0.language.starts(with: language) }
            
            // ÂÑ™ÂÖàÈÅ∏ÊìáÈ´òÂìÅË≥™Ë™ûÈü≥ÔºàEnhanced QualityÔºâ
            if let enhancedVoice = languageVoices.first(where: { $0.quality == .enhanced }) {
                print("üé§ ‰ΩøÁî®È´òÂìÅË≥™Ë™ûÈü≥: \(enhancedVoice.name) (\(enhancedVoice.language))")
                return enhancedVoice
            }
            
            // Â¶ÇÊûúÊ≤íÊúâÈ´òÂìÅË≥™Ë™ûÈü≥ÔºåÈÅ∏ÊìáÁ•ûÁ∂ìÁ∂≤Áµ°Ë™ûÈü≥ÔºàNeural QualityÔºâ
            if let neuralVoice = languageVoices.first(where: { $0.quality == .neural }) {
                print("üé§ ‰ΩøÁî®Á•ûÁ∂ìÁ∂≤Áµ°Ë™ûÈü≥: \(neuralVoice.name) (\(neuralVoice.language))")
                return neuralVoice
            }
            
            // ÊúÄÂæåÈÅ∏ÊìáÊ®ôÊ∫ñË™ûÈü≥
            if let standardVoice = languageVoices.first {
                print("üé§ ‰ΩøÁî®Ê®ôÊ∫ñË™ûÈü≥: \(standardVoice.name) (\(standardVoice.language))")
                return standardVoice
            }
        }
        
        // Â¶ÇÊûúÊ≤íÊúâÊâæÂà∞‰∏≠ÊñáË™ûÈü≥ÔºåÂòóË©¶‰ΩøÁî®Á≥ªÁµ±ÈªòË™çË™ûÈü≥
        if let defaultVoice = AVSpeechSynthesisVoice.speechVoices().first {
            print("üé§ ‰ΩøÁî®Á≥ªÁµ±ÈªòË™çË™ûÈü≥: \(defaultVoice.name) (\(defaultVoice.language))")
            return defaultVoice
        }
        
        return nil
    }
    
    // MARK: - Ë™ûÈü≥Ë≥™ÈáèÊ™¢Ê∏¨
    private func logAvailableVoices() {
        let voices = AVSpeechSynthesisVoice.speechVoices()
        let chineseVoices = voices.filter { $0.language.starts(with: "zh") }
        
        print("üîç ÂèØÁî®ÁöÑ‰∏≠ÊñáË™ûÈü≥:")
        for voice in chineseVoices {
            let quality = voice.quality == .enhanced ? "È´òÂìÅË≥™" : 
                         voice.quality == .neural ? "Á•ûÁ∂ìÁ∂≤Áµ°" : "Ê®ôÊ∫ñ"
            print("  - \(voice.name) (\(voice.language)) - \(quality)")
        }
        
        if chineseVoices.isEmpty {
            print("‚ö†Ô∏è Ê≤íÊúâÊâæÂà∞‰∏≠ÊñáË™ûÈü≥ÔºåÂ∞á‰ΩøÁî®Á≥ªÁµ±ÈªòË™çË™ûÈü≥")
        }
    }
}

// MARK: - Ë™ûÈü≥‰ª£ÁêÜ
class SpeechDelegate: NSObject, AVSpeechSynthesizerDelegate {
    var onStart: (() -> Void)?
    var onFinish: (() -> Void)?
    var onCancel: (() -> Void)?
    
    func speechSynthesizer(_ synthesizer: AVSpeechSynthesizer, didFinish utterance: AVSpeechUtterance) {
        onFinish?()
    }
    
    func speechSynthesizer(_ synthesizer: AVSpeechSynthesizer, didStart utterance: AVSpeechUtterance) {
        onStart?()
    }
    
    func speechSynthesizer(_ synthesizer: AVSpeechSynthesizer, didCancel utterance: AVSpeechUtterance) {
        onCancel?()
    }
}

#Preview {
    let config = ModelConfiguration(isStoredInMemoryOnly: true)
    let container = try! ModelContainer(for: Story.self, Sentence.self, configurations: config)
    
    StoryReaderView(storyId: "story_pangu")
        .modelContainer(container)
} 
